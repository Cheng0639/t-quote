{"version":3,"sources":["logo.svg","Test.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Test","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","left","React","createRef","leftHeader","middle","right","rightHeader","cellWidth","state","x","y","renderHeaderColumn","toConsumableArray","keys","map","react_default","a","createElement","key","style","display","width","border","boxSizing","toString","padStart","inherits","createClass","value","current","scrollLeft","clientWidth","_this2","_this3","Swipeable_default","onSwiping","e","deltaX","deltaY","_this3$state","scrollTop","onSwiped","setState","height","background","margin","ref","overflow","backgroundColor","textAlign","direction","renderData","lineHeight","backgroundImage","Component","App","src_Test","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83689f15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport Swipeable from \"react-swipeable\";\n\nexport class Test extends Component {\n  left = React.createRef();\n  leftHeader = React.createRef();\n  middle = React.createRef();\n  right = React.createRef();\n  rightHeader = React.createRef();\n\n  cellWidth = 60;\n\n  state = {\n    x: 0,\n    y: 0\n  };\n\n  componentDidMount() {\n    this.left.current.scrollLeft =\n      this.cellWidth * 10 - this.left.current.clientWidth;\n    this.leftHeader.current.scrollLeft =\n      this.cellWidth * 10 - this.leftHeader.current.clientWidth;\n  }\n\n  renderHeaderColumn = () => {\n    return [...Array(10).keys()].map(x => (\n      <div\n        key={x}\n        style={{\n          display: \"inline-block\",\n          width: `${this.cellWidth}px`,\n          border: \"1px solid black\",\n          boxSizing: \"border-box\"\n        }}\n      >\n        Column {x.toString().padStart(2, \"0\")}\n      </div>\n    ));\n  };\n\n  renderData() {\n    return [...Array(222).keys()].map(x => (\n      <div key={x}>\n        {[...Array(10).keys()].map(y => (\n          <div\n            key={y}\n            style={{\n              display: \"inline-block\",\n              width: `${this.cellWidth}px`,\n              border: \"1px solid black\",\n              boxSizing: \"border-box\"\n            }}\n          >\n            {x},{y}\n          </div>\n        ))}\n      </div>\n    ));\n  }\n\n  render() {\n    return (\n      <Swipeable\n        onSwiping={(e, deltaX, deltaY) => {\n          // console.log(\"swiping\");\n          const { x, y } = this.state;\n          if (deltaY !== 0) {\n            this.left.current.scrollTop = y + deltaY;\n            this.right.current.scrollTop = y + deltaY;\n            this.middle.current.scrollTop = y + deltaY;\n          }\n\n          this.left.current.scrollLeft =\n            this.cellWidth * 10 - this.left.current.clientWidth - x - deltaX;\n          this.right.current.scrollLeft = x + deltaX;\n\n          this.leftHeader.current.scrollLeft =\n            this.cellWidth * 10 -\n            this.leftHeader.current.clientWidth -\n            x -\n            deltaX;\n          this.rightHeader.current.scrollLeft = x + deltaX;\n\n          // debugger;\n        }}\n        onSwiped={() => {\n          const x = this.right.current.scrollLeft;\n          const y = this.right.current.scrollTop;\n          this.setState({ x: x, y: y });\n        }}\n        style={{\n          width: \"100vw\",\n          height: \"100vh\",\n          background: \"#3e3e3e\",\n          margin: \"0 auto\",\n          display: \"flex\"\n        }}\n      >\n        <div\n          style={{\n            width: \"43%\"\n          }}\n        >\n          <div\n            ref={this.leftHeader}\n            style={{\n              overflow: \"hidden\",\n              backgroundColor: \"bisque\",\n              textAlign: \"center\"\n            }}\n          >\n            <div\n              style={{\n                width: `${this.cellWidth * 10}px`,\n                direction: \"rtl\"\n              }}\n            >\n              {this.renderHeaderColumn()}\n            </div>\n          </div>\n          <div\n            ref={this.left}\n            style={{\n              height: \"100%\",\n              overflow: \"hidden\",\n              textAlign: \"center\"\n            }}\n          >\n            <div\n              style={{\n                width: `${this.cellWidth * 10}px`,\n                backgroundColor: \"pink\",\n                direction: \"rtl\"\n              }}\n            >\n              {this.renderData()}\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            width: \"14%\"\n          }}\n        >\n          <div\n            ref={this.middle}\n            style={{\n              height: \"100%\",\n              overflow: \"hidden\",\n              textAlign: \"center\"\n            }}\n          >\n            <div\n              style={{\n                height: \"38px\",\n                lineHeight: \"38px\",\n                backgroundColor: \"#FCF3CF\",\n                textAlign: \"center\",\n                border: \"1px solid black\",\n                boxSizing: \"border-box\"\n              }}\n            >\n              <div>201901</div>\n            </div>\n            <div\n              style={{\n                width: \"100%\",\n                backgroundImage: \"linear-gradient(to bottom , white , black)\"\n              }}\n            >\n              {[...Array(222).keys()].map(x => (\n                <div key={x}>{x}</div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            width: \"43%\"\n          }}\n        >\n          <div\n            ref={this.rightHeader}\n            style={{\n              overflow: \"hidden\",\n              backgroundColor: \"bisque\",\n              textAlign: \"center\"\n            }}\n          >\n            <div\n              style={{\n                width: `${this.cellWidth * 10}px`\n              }}\n            >\n              {this.renderHeaderColumn()}\n            </div>\n          </div>\n          <div\n            ref={this.right}\n            style={{\n              height: \"100%\",\n              overflow: \"hidden\",\n              textAlign: \"center\"\n            }}\n          >\n            <div\n              style={{\n                width: `${this.cellWidth * 10}px`,\n                backgroundColor: \"orange\"\n              }}\n            >\n              {this.renderData()}\n            </div>\n          </div>\n        </div>\n      </Swipeable>\n    );\n  }\n}\n\nexport default Test;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Test from \"./Test\";\n\nclass App extends Component {\n  render() {\n    return <Test />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}